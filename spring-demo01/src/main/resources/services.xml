<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- services -->

    <bean id="petStore" class="com.wang.service.PetStoreServiceImpl">
        <property name="accountDao" ref="accountDao"/>
        <property name="itemDao" ref="itemDao"/>
        <!-- additional collaborators and configuration for this bean go here -->
    </bean>
    <alias name="petStore" alias="petStoreService1"/>
    <alias name="petStore" alias="petStoreService2"/>

    <bean id="accountDao"
          class="com.wang.dao.JpaAccountDao">
        <!-- additional collaborators and configuration for this bean go here -->
    </bean>

    <bean id="itemDao" class="com.wang.dao.JpaItemDao">
        <!-- additional collaborators and configuration for this bean go here -->
    </bean>

    <!--静态工厂实例化bean-->
    <bean id="clientService"
          class="com.wang.service.ClientService"
          factory-method="createInstance"/>

    <!-- the factory bean, which contains a method called createInstance() -->
    <bean id="serviceLocator" class="com.wang.service.DefaultServiceLocator">
        <!-- inject any dependencies required by this locator bean -->
    </bean>

    <!--factory-bean指定当前容器中包含创建该bean方法的bean的名称  -->
    <bean id="clientService01"
          factory-bean="serviceLocator"
          factory-method="createClientServiceInstance"/>

    <!--基于构造器依赖注入-->
    <bean id="beanOne" class="com.wang.service.bean.BeanOne">
        <constructor-arg ref="beanTwo"/>
        <constructor-arg ref="beanThree"/>
    </bean>

    <bean id="beanTwo" class="com.wang.service.bean.BeanTwo"/>

    <bean id="beanThree" class="com.wang.service.bean.BeanThree"/>

    <!--基于构造器依赖注入,类型是已知情况-->
    <bean id="exampleBean" class="com.wang.service.bean.ExampleBean">
        <constructor-arg type="int" value="7500000"/>
        <constructor-arg type="java.lang.String" value="42"/>
    </bean>

    <!--index指定构造函数索引-->
    <!--<bean id="exampleBean" class="com.wang.service.bean.ExampleBean">-->
    <!--    <constructor-arg index="0" value="7500000"/>-->
    <!--    <constructor-arg index="1" value="42"/>-->
    <!--</bean>-->

    <!--基于set注入-->
    <bean id="movieFinder" class="com.wang.service.MovieFinder"/>
    <bean id="simpleMovieLister" class="com.wang.service.SimpleMovieLister">
        <property name="movieFinder" ref="movieFinder"/>
    </bean>

    <!--循环依赖-->
    <!--<bean id="cyclicA" class="com.wang.service.CyclicA">-->
    <!--    <constructor-arg ref="cyclicB"/>-->
    <!--</bean>-->

    <!--<bean id="cyclicB" class="com.wang.service.CyclicB">-->
    <!--    <constructor-arg ref="cyclicA"/>-->
    <!--</bean>-->
    <!--set注入解决循环依赖-->
    <bean id="cyclicA" class="com.wang.service.CyclicA">
        <property name="cyclicB" ref="cyclicB"/>
    </bean>

    <bean id="cyclicB" class="com.wang.service.CyclicB">
        <property name="cyclicA" ref="cyclicA"/>
    </bean>

    <!--字面值属性设置-->
    <bean id="myDataSource" class="com.wang.config.DataSource" destroy-method="close">
        <!-- results in a setDriverClassName(String) call -->
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/mydb"/>
        <property name="username" value="root"/>
        <property name="password" value="misterkaoli"/>
    </bean>

    <!--字面值属性设置 p-namespace-->
    <!--<bean id="myDataSource" class="com.wang.config.DataSource"-->
    <!--      destroy-method="close"-->
    <!--      p:driverClassName="${jdbc.driver.className}"-->
    <!--      p:url="${jdbc.url}"-->
    <!--      p:username="${jdbc.username}"-->
    <!--      p:password="${jdbc.password}"/>-->

    <!--配置java.util.Properties 实例-->
    <bean id="mappings"
          class="org.springframework.context.support.PropertySourcesPlaceholderConfigurer">

        <!-- typed as a java.util.Properties -->
        <property name="properties">
            <value>
                jdbc.driver.className=com.mysql.jdbc.Driver
                jdbc.url=jdbc:mysql://localhost:3306/mydb
                jdbc.username=root
                jdbc.password=misterkaoli
            </value>
        </property>
    </bean>

    <!--内部bean-->
    <bean id="parentDataSource" class="com.wang.config.ParentDataSource">
        <property name="sonDataSource">
            <!--内部bean只在内部引用，不需要id-->
            <bean class="com.wang.config.SonDataSource">
                <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
                <property name="url" value="jdbc:mysql://localhost:3306/mydb"/>
                <property name="username" value="root"/>
                <property name="password" value="misterkaoli"/>
            </bean>
        </property>
    </bean>

    <bean id="storeDao" class="com.wang.dao.StoreDao">
        <property name="adminEmails">
            <props>
                <prop key="administrator">administrator@example.org</prop>
                <prop key="support">support@example.org</prop>
            </props>
        </property>
        <property name="someList">
            <list>
                <ref bean="myDataSource"/>
            </list>
        </property>
        <property name="someMap">
            <map>
                <entry key="111" value="zhangsan"/>
                <entry key="123" value="lisi"/>
            </map>
        </property>
        <property name="someSet">
            <set>
                <value>xiaomi</value>
                <value>huawei</value>
            </set>
        </property>
    </bean>

    <!--null-->
    <bean id="exampleBean1" class="com.wang.service.bean.ExampleBean01">
        <property name="email">
            <null/>
        </property>
        <!--<property name="email" value=""/>-->
    </bean>

    <!--xml导入-->
    <import resource="message.xml"/>

    <!-- more bean definitions for services go here -->

</beans>
